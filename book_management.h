#ifndef BOOK_MANAGEMENT_GUARD__H 
#define BOOK_MANAGEMENT_GUARD__H

#include <stdio.h>
#include <stdlib.h>
#include<windows.h>
#include <string.h>

/*You can extend the structs (Book and BookArray) defined in this head file;
  However, you may not change the function prototypes. 
  You are also free to add additional head files and data structures as needed. 
*/

typedef struct _Book {
	    unsigned int id; //Book ID
		char *title; //book title
		char *authors; //comma separated list of authors
		unsigned int year; // year of publication
		unsigned int copies; //number of copies the library has
		struct _Book *nextbook;//定义指针域 
}Book;

typedef struct _BookArray {
	 Book* array; // pointer to array (or linked list) of struct Book.
	 unsigned int length; // number of elements in the (Book*) array 
}BookArray;

typedef Book *pbook;

pbook bookhead = NULL;//创建头指针，初始值为NULL 

//让光标处在特定位置 
void setxy(int a,int b) 
{
    COORD coordinate;//Coord是在一个结构体，定义在windows.h里 
    coordinate.X=a-1;
    coordinate.Y=b-1;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE),coordinate);
}
//得到光标坐标y的位置 
int ylocation()
{
    CONSOLE_SCREEN_BUFFER_INFO screen_buffer;//CONSOLE_SCREEN_BUFFER_INFO结构体包含控制台屏幕缓冲区的信息
    GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &screen_buffer);// GetConsoleScreenBufferInfo 函数可以获取控制台屏幕缓冲区信息
    return (screen_buffer.dwCursorPosition.Y+1);
}
//得到光标坐标x的位置 
int xlocation()
{
    CONSOLE_SCREEN_BUFFER_INFO screen_buffer;
    GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &screen_buffer);
    return (screen_buffer.dwCursorPosition.X+1);
}
//主界面 
void Mainmenu()
{
    int a, b;
    int Num;
    setxy(31,5);
    printf("Library management system");
    setxy(20,8);
    printf("*********************Main Menu*********************");
    setxy(20,9);
    printf(" 1 General user login ");
    setxy(20,10);
    printf(" 2 General user registration ");
    setxy(20,11);
    printf(" 3 Administrator login");//Administrator account: Administrator password: Administrator
    setxy(20,12);
    printf(" 4 Search for books");
    setxy(20,13);
    printf(" 5 Display all books");
    setxy(20,14);
    printf("************************************************");
    setxy(20,15);
    printf("请输入你的选择(0-5):[ ]");
    a=xlocation();
    b=ylocation();
    setxy(a-2,b);
    scanf("%d",&Num);
}
//saves the database of books in the specified file
//returns 0 if books were stored correctly, or an error code otherwise
int store_books(FILE *file)
{
	int a;
	pbook sbook = bookhead ;
	file=fopen("bookfile","ab+");   //以追加的方式打开名字为mybook的二进制文件 
	if(file==NULL)
	{
		printf("file can't be opened");
		return 1; 
	}
	if (sbook==NULL){
		return 1;//链表还为空，没有书籍需要存入文件 
	}
	while(sbook!=NULL){
		a=fwrite(sbook,sizeof(struct _Book),1,file);//将链表中的内容内容存入file所指向的文件中
		if(a!=1)   
		{
			printf("An error occurred while writing to the file");
			return 1;
		}
		sbook = sbook->nextbook; 	
	}
	fclose(file);    //关闭文件
	return 0;	
} 

//loads the database of books from the specified file
//the file must have been generated by a previous call to store_books()
//returns 0 if books were loaded correctly, or an error code otherwise
int load_books(FILE *file){
	file=fopen("bookfile","ab+");  //打开文件
	pbook bookpa = NULL, bookpb = NULL, bookpc = NULL;
	if(file==NULL)
	{
		printf("the file can not be opened successfully\n");
		return 1;
	}
	while(!feof(file))        //判断读写标志是否移到文件末尾 
	{
	    bookpa=(pbook)malloc(sizeof(Book)); //用malloc在内存申请一段空间 
	   fread(bookpa,sizeof(struct _Book),1,file);     //将file所指向文件的内容传递给bookpa 
	   if(bookhead==NULL)
	   {
	      bookhead=bookpa;
	      bookpb=bookpa;
	    }
	    else             //建立链表 
	    {
	    	bookpc=bookpb;
	    	bookpb->nextbook=bookpa;
	    	bookpb=bookpa;
		}
    }
    if(bookpc!=NULL)  	//文件里没有数据 
       bookpc->nextbook=NULL;
    else
       bookhead=NULL;
    fclose(file);    //关闭文件
	return 0; 
}

//adds a book to the ones available to the library
//returns 0 if the book could be added, or an error code otherwise
int add_book(Book book)
{
	do
	{
		pbook padd = NULL, bookpr = bookhead;
		FILE *file;    //指向文件的指针 
		int s,f;
		padd=(pbook)malloc(sizeof(Book));//申请内存空间
		if(padd == NULL){			//如果申请内存失败，则添加book失败，返回1 
			printf("memory allocation failed\n");
			return 1;
		}
		if(bookhead == NULL){ //如果头指针是NULL,说明可以从头添加节点 
			bookhead = padd;
		}else{
			while(bookpr->nextbook!= NULL){
					bookpr = bookpr->nextbook;
			}
			bookpr->nextbook = padd;
		}
		//添加图书信息
		printf(" Please input BOOK id ");    
		scanf("%s",&padd->id);
		printf(" Please input BOOK title ");
		scanf("%s",&padd->title);
		printf("Please input BOOK authors");
		scanf("%s",&padd->authors);
		printf("Please input Year of publication");
		scanf("%s",&padd->year);
		printf("Please input the number of copies of the book\n");
		scanf("%s",&padd->copies);
		padd->nextbook = NULL;//新增的节点位于链表末端，所以为null 
		system("pause");
		printf("|                                              |");
		printf("| Saved successfully. Do you want to continue  |");
		printf("| 1.YES                                    2.NO|\n"); 
		scanf("%d",&s);
		do{
			if(s=='1')
			{
				break;
			}	 
			else if(s=='2')
			{
				return 0;
			}			
		 }while(1);  
	}while(1);
}

//removes a book from the library
//returns 0 if the book could be successfully removed, or an error code otherwise.
int remove_book(Book book){
	
} 

//finds books with a given title.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the 
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
BookArray find_book_by_title (const char *title);

//finds books with the given authors.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the 
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
BookArray find_book_by_author (const char *author);

//finds books published in the given year.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the 
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
BookArray find_book_by_year (unsigned int year);


//主函数 
int main(){
	Mainmenu(); 
	return 0;
}
#endif
